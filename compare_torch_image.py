# pip install torch torchvision

import torch
from torchvision import models, transforms
from PIL import Image
import torch.nn.functional as F

'''
–ó–Ω–∞—á–µ–Ω–∏–µ –æ—Ç -1 –¥–æ 1 (–æ–±—ã—á–Ω–æ –æ—Ç 0 –¥–æ 1 –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π).
–ß–µ–º –±–ª–∏–∂–µ –∫ 1 ‚Äî —Ç–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ –ø–æ—Ö–æ–∂–µ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ.
–î–∞–∂–µ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞, —Ä–∞–∫—É—Ä—Å–∞, –æ—Å–≤–µ—â–µ–Ω–∏—è ‚Äî —Å–µ—Ç—å –º–æ–∂–µ—Ç "–ø–æ–Ω—è—Ç—å", —á—Ç–æ —ç—Ç–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, "–ø–æ—Ä—Ç—Ä–µ—Ç –∂–µ–Ω—â–∏–Ω—ã".
'''

# 1. –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ (–±–µ–∑ –≥–æ–ª–æ–≤—ã –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏)
model = models.resnet50(pretrained=True)
model = torch.nn.Sequential(*list(model.children())[:-1])  # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Å–ª–æ–π
model.eval()

# 2. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫–∞–∫ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ ImageNet)
preprocess = transforms.Compose([
    transforms.Resize((224, 224)),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

def extract_features(image_path):
    img = Image.open(image_path).convert('RGB')
    img_tensor = preprocess(img).unsqueeze(0)  # –î–æ–±–∞–≤–ª—è–µ–º batch dimension
    with torch.no_grad():
        features = model(img_tensor)
    return features.flatten()

def cosine_similarity_pytorch(img1_path, img2_path):
    feat1 = extract_features(img1_path)
    feat2 = extract_features(img2_path)
    # Cosine similarity
    cos_sim = F.cosine_similarity(feat1.unsqueeze(0), feat2.unsqueeze(0))
    return cos_sim.item()

# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
sim = cosine_similarity_pytorch('vermeer.jpg', 'amelie_lens.jpg')
print(f"Semantic similarity (ResNet50 + Cosine): {sim:.4f}")

# Semantic similarity (ResNet50 + Cosine): 0.7499


# pip install git+https://github.com/openai/CLIP.git

import clip
from PIL import Image
import torch

device = "cuda" if torch.cuda.is_available() else "cpu"
model, preprocess = clip.load("ViT-B/32", device=device)

def clip_similarity(img1_path, img2_path):
    image1 = preprocess(Image.open(img1_path)).unsqueeze(0).to(device)
    image2 = preprocess(Image.open(img2_path)).unsqueeze(0).to(device)

    with torch.no_grad():
        feat1 = model.encode_image(image1)
        feat2 = model.encode_image(image2)
        similarity = F.cosine_similarity(feat1, feat2).item()
    return similarity

sim = clip_similarity('vermeer.jpg', 'amelie_lens.jpg')
print(f"Clip similarity (ViT-B/32): {sim:.4f}")

# Clip similarity (ViT-B/32): 0.4933

'''
1. ResNet50 + Cosine: 0.7499 

    –≠—Ç–æ –¥–æ–≤–æ–ª—å–Ω–æ –≤—ã—Å–æ–∫–∞—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Ö–æ–∂–µ—Å—Ç—å.
    ResNet50 –æ–±—É—á–∞–ª–∞—Å—å –Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ (ImageNet), –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ —Ö–æ—Ä–æ—à–æ –ø–æ–Ω–∏–º–∞–µ—Ç:
        –ï—Å—Ç—å –ª–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —á–µ–ª–æ–≤–µ–∫, –ª–∏—Ü–æ, –æ–¥–µ–∂–¥–∞, —Ñ–æ–Ω, —Ü–≤–µ—Ç–∞, –∫–æ–º–ø–æ–∑–∏—Ü–∏—è.
         
    –ó–Ω–∞—á–µ–Ω–∏–µ 0.75 –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ:
        –û–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Å–æ–¥–µ—Ä–∂–∞—Ç –ø–æ—Ö–æ–∂–∏–µ –æ–±—ä–µ–∫—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Ä—Ç—Ä–µ—Ç—ã –ª—é–¥–µ–π).
        –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ—Ö–æ–∂–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è (—á–µ–ª–æ–≤–µ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É, –º—è–≥–∫–∏–π —Ñ–æ–Ω).
        –ù–æ —ç—Ç–æ –Ω–µ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –∏–Ω–∞—á–µ –±—ã–ª–æ –±—ã –±–ª–∏–∂–µ –∫ 0.95‚Äì1.0.
         
     
–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: ¬´–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∏–∑—É–∞–ª—å–Ω–æ –∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏ —Å—Ö–æ–∂–∏ ‚Äî –æ–±–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–æ—Ä—Ç—Ä–µ—Ç—ã, —Å –ø–æ—Ö–æ–∂–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π —Å—Ü–µ–Ω—ã¬ª. 
     
 
üîπ 2. CLIP (ViT-B/32): 0.4933 

    –≠—Ç–æ —É–º–µ—Ä–µ–Ω–Ω–æ –Ω–∏–∑–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.
    CLIP –æ–±—É—á–µ–Ω–∞ –Ω–∞ –ø–∞—Ä–∞—Ö "–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ‚Äì—Ç–µ–∫—Å—Ç", –ø–æ—ç—Ç–æ–º—É –æ–Ω–∞ –ø–æ–Ω–∏–º–∞–µ—Ç –≤—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–π —Å–º—ã—Å–ª, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –æ–±—ä–µ–∫—Ç—ã.
        –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–∂–µ–Ω—â–∏–Ω–∞ –≤ —à–ª—è–ø–µ¬ª, ¬´—Ä–µ—Ç—Ä–æ-—Å—Ç–∏–ª—å¬ª, ¬´–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω—ã–π –≤–∑–≥–ª—è–¥¬ª, ¬´–∫–∞—Ä—Ç–∏–Ω–∞ –í–µ—Ä–º–µ–µ—Ä–∞¬ª –∏ —Ç.–¥.
         
    –ó–Ω–∞—á–µ–Ω–∏–µ ~0.5 –æ–∑–Ω–∞—á–∞–µ—Ç:
        –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –æ—á–µ–Ω—å –ø–æ—Ö–æ–∂–∏ –ø–æ —Å–º—ã—Å–ª—É, –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ö–æ–¥—Å—Ç–≤–æ.
        –ù–∞–ø—Ä–∏–º–µ—Ä: –æ–¥–Ω–æ ‚Äî –∫–∞—Ä—Ç–∏–Ω–∞ —Å—Ç–∞—Ä–æ–≥–æ –º–∞—Å—Ç–µ—Ä–∞ (Vermeer), –¥—Ä—É–≥–æ–µ ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –≤ —Å—Ç–∏–ª–µ –∫–∏–Ω–æ (Am√©lie).
        CLIP "–≤–∏–¥–∏—Ç", —á—Ç–æ —ç—Ç–æ —Ä–∞–∑–Ω—ã–µ —ç–ø–æ—Ö–∏, —Å—Ç–∏–ª–∏, –º–µ–¥–∏—É–º—ã (–∂–∏–≤–æ–ø–∏—Å—å vs —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è), –¥–∞–∂–µ –µ—Å–ª–∏ –æ–±–∞ ‚Äî –ø–æ—Ä—Ç—Ä–µ—Ç—ã –∂–µ–Ω—â–∏–Ω.
         
     

–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è: ¬´–•–æ—Ç—è –æ–±–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ‚Äî –ø–æ—Ä—Ç—Ä–µ—Ç—ã, –∏—Ö –∫–æ–Ω—Ç–µ–∫—Å—Ç, —Å—Ç–∏–ª—å –∏ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏–µ —Å–∏–ª—å–Ω–æ —Ä–∞–∑–ª–∏—á–∞—é—Ç—Å—è, –ø–æ—ç—Ç–æ–º—É CLIP —Å—á–∏—Ç–∞–µ—Ç –∏—Ö —Å–ª–∞–±–æ —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏¬ª.
'''